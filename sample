class BookApp extends React.Component{
    constructor(props){
      super(props);
      this.state = {
        items: {{{books}}},
        filter: "", // search term 
        curItem: {} // current selected item 
      };
      // bind App context to functions used by child components
      this.onSearch = this.onSearch.bind(this);
      this.showDetails = this.showDetails.bind(this);
      this.onClear = this.onClear.bind(this);
      this.onChange = this.onChange.bind(this);
      this.onSave = this.onSave.bind(this);
      this.onDelete = this.onDelete.bind(this);
      
    }

    onSearch(event) {
      // set search term. react will handle component updates 
      this.setState({filter: event.target.value.toLowerCase() });
    }

    showDetails(event) {
      // event.target is item clicked. Assumes each item has an id attribute
      let editItem = this.state.items.find((item) => {
        return item._id == event.target.id;
      });
      this.setState({curItem: editItem});
    }
    
    onClear() {
      this.setState({curItem: {}});
    }
    // handle detail changes
    onChange(event) {
      var newItem = this.state.curItem;
      newItem[event.target.name] = event.target.value
      this.setState({curItem: newItem});
    }
    // Handle item save
    onSave() {
      let newItem = this.state.curItem;
      if (!newItem.title) {
        return;
      }
      fetch("/api/v1/add/", {
        method: "POST",
          headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newItem)
      }).then(res => res.json())
          .then((json) => {
        let newData;
        if (!newItem._id) { // add new item to array
          newData = this.state.items;
          newItem._id = json._id;
          newData.push(newItem);
        } else { // update existing item 
          newData = this.state.items.map((item) => {
            if (item._id === newItem._id) {
              item = newItem; 
            }
            return item;
          });          
        }

        // Update state with new array
        this.setState({items: newData});
      });
    }
    
    // Handle item delete
    onDelete() {
      let id = this.state.curItem._id;
      
      fetch("/api/v1/delete/" + id).then((response) => {
        return response.json();
      }).then((results) => {
        // Filter all items except the one to be removed
        const remainder = this.state.items.filter((item) => {
          return item._id !== id;
        });
        // Update state with new array & clear current item
        this.setState({items: remainder, curItem: {}});
      });
    }
  
    render() {
      // render app UI elements
      return (
        <div>
        <Title title="Book Store" />
        <SearchForm filter={this.state.filter} change={this.onSearch} />
        <div className="flex-container">
          <ItemList
              items={this.state.items} 
              filter={this.state.filter}
              show={this.showDetails}
          />
          <ItemDetails item={this.state.curItem} change={this.onChange} save={this.onSave} reset={this.onClear} delete={this.onDelete} />
          </div>
        </div>
        );
    }
  }
  
  // UI elements
  const Title = ({title}) => {
      return (
         <div><h2>{title}</h2></div>
      );
  }
  const SearchForm = (props) => {
      return (
        <div>
          <input
            type="text" placeholder="Enter a search term"
            value={props.filter}
            onChange={props.change}
          /><p/>
        </div>
      );
  }
  const ItemList = ({items, filter, show}) => {
    // return items that match search entry field, or all items if no entry
    const itemNodes = items.map((item) => {
      if (!filter || item.title.toLowerCase().includes(filter)) { 
        return <li id={item._id} key={item._id} onClick={show}>{item.title}</li>
      }
    });
    return <span id="item-list"><ul>{itemNodes}</ul></span>;
  }
  
  const ItemDetails = (props) => {
      return (
        <span id="item-details">
          <h3>Details:</h3>
          <form>
            <input type="text" name="title" placeholder="title" onChange={props.change} value={props.item.title || ""} /><p/>
            <input type="text" name="author" placeholder="author"  onChange={props.change} value={props.item.author || ""} /><p/>
            <input type="date" name="pubdate" placeholder="pub. date" onChange={props.change} value={getISOstring(props.item.pubdate)} />
            <p/>
          </form>
          <button onClick={props.save}>Save</button>  <button onClick={props.reset}>Reset</button> <button onClick={props.delete}>Delete</button>
        </span>
      );
  }

  ReactDOM.render(<BookApp />, document.getElementById('root'));